# üè¶ Sistema Banc√°rio em Java (PostgreSQL)

Este projeto implementa um sistema banc√°rio em **Java** com integra√ß√£o ao banco de dados **PostgreSQL** via JDBC, permitindo criar contas, depositar, sacar, consultar saldos e transferir valores entre contas, com autentica√ß√£o segura por senha.

## üöÄ Vis√£o Geral

O programa √© composto por:

- **Interface Principal**: `BankingSystem.java` (menu interativo no console)
- **Acesso ao Banco**: `ContaDAO.java` (gerencia opera√ß√µes no PostgreSQL)
- **Modelo de Dados**: `Conta.java` (representa uma conta banc√°ria)
- **Script SQL**: `create_database.sql` (cria o banco de dados)

üëâ **Baixe este README**: [README.md](https://raw.githubusercontent.com/seu_usuario/banking-system/main/README.md)  
üëâ **Baixe o projeto completo**: [banking-system.zip](https://github.com/seu_usuario/banking-system/archive/refs/heads/main.zip)

---

## üìã Regras do Sistema

- Contas s√£o identificadas por um **ID √∫nico** e protegidas por **senha** (hasheada com jBCrypt).
- Opera√ß√µes (dep√≥sito, saque, consulta, transfer√™ncia) exigem autentica√ß√£o com ID e senha.
- O saldo n√£o pode ser negativo, e todas as transa√ß√µes s√£o registradas.
- Transfer√™ncias verificam saldo suficiente e validade das contas.
- O sistema valida entradas e exibe mensagens claras para erros.

---

## ‚öôÔ∏è Como Funciona o C√≥digo

### üîê Constantes e Configura√ß√µes

```java
private static final String DB_URL = "jdbc:postgresql://localhost:5432/bank_db";
private static final String DB_USER = "postgres";
private static final String DB_PASSWORD = "sua_senha_aqui";
```

Define a conex√£o com o PostgreSQL (URL, usu√°rio e senha).

---

### üè¶ Estrutura do Banco de Dados

```sql
CREATE TABLE IF NOT EXISTS contas (
                id_conta SERIAL PRIMARY KEY,
                nome_titular VARCHAR(100) NOT NULL,
                senha VARCHAR(255) NOT NULL,
                saldo DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
                CONSTRAINT chk_saldo CHECK (saldo >= 0));
								
CREATE TABLE IF NOT EXISTS transacoes (
    id_transacao SERIAL PRIMARY KEY,
    id_conta INT REFERENCES contas(id_conta),
    tipo VARCHAR(255) NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    data_transacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_conta_destino INT REFERENCES contas(id_conta) NULL);	
```

- `contas`: Armazena informa√ß√µes das contas (ID, nome, senha hasheada, saldo).
- `transacoes`: Registra hist√≥rico de opera√ß√µes, incluindo transfer√™ncias com conta de destino.

---

### üßë Criar Conta

```java
public int criarConta(String nome, String senha) throws SQLException {
    String hashedSenha = BCrypt.hashpw(senha, BCrypt.gensalt());
    // Insere conta e retorna ID gerado
}
```

- Solicita nome e senha do titular.
- Gera hash da senha com jBCrypt.
- Retorna o ID da conta criada.

---

### üîë Autentica√ß√£o

```java
private static Conta autenticarUsuario() {
    // Solicita ID e senha, verifica no banco
}
```

Valida o ID e a senha antes de permitir opera√ß√µes, retornando um objeto `Conta` ou `null`.

---

### üí∏ Dep√≥sito, Saque e Transfer√™ncia

```java
public void depositar(int idConta, double valor) throws SQLException {
    String sql = "UPDATE contas SET saldo = saldo + ? WHERE id_conta = ? AND EXISTS (SELECT 1 FROM contas WHERE id_conta = ?)";
    // Atualiza saldo e registra transa√ß√£o
}
public void sacar(int idConta, double valor) throws SQLException {
    String sql = "UPDATE contas SET saldo = saldo - ? WHERE id_conta = ? AND saldo >= ? AND EXISTS (SELECT 1 FROM contas WHERE id_conta = ?)";
    // Verifica saldo suficiente, atualiza e registra transa√ß√£o
}
public void transferir(int idContaOrigem, int idContaDestino, double valor) throws SQLException {
    // Realiza transfer√™ncia at√¥mica, atualiza saldos e registra transa√ß√µes
}
```

- **Dep√≥sito**: Adiciona valor ao saldo, validando a exist√™ncia da conta.
- **Saque**: Subtrai valor, verificando saldo suficiente e exist√™ncia da conta.
- **Transfer√™ncia**: Transfere valor entre contas, com valida√ß√£o de saldo e contas, em uma transa√ß√£o at√¥mica.

---

## üõ†Ô∏è Como Rodar

1. **Instale o PostgreSQL**:
   - Baixe e instale o PostgreSQL: [https://www.postgresql.org/download/](https://www.postgresql.org/download/).
   - Execute o script `src/main/resources/create_database.sql`:
     ```bash
     psql -U postgres -f src/main/resources/create_database.sql
     ```

2. **Atualize a Tabela de Transa√ß√µes (se necess√°rio)**:
   - Se o banco j√° existe, adicione a coluna `id_conta_destino`:
     ```sql
     ALTER TABLE transacoes
     ADD COLUMN id_conta_destino INT REFERENCES contas(id_conta) NULL;
     ```

3. **Configure as Depend√™ncias**:
   - **Com Maven**:
     ```bash
     mvn clean install
     ```
   - **Sem Maven**:
     - Baixe:
       - PostgreSQL JDBC: [https://jdbc.postgresql.org/](https://jdbc.postgresql.org/)
       - jBCrypt: [https://repo1.maven.org/maven2/org/mindrot/jbcrypt/0.4/](https://repo1.maven.org/maven2/org/mindrot/jbcrypt/0.4/)
     - Adicione os JARs ao classpath.

4. **Configure o Banco**:
   - Em `ContaDAO.java`, atualize `DB_PASSWORD` com sua senha do PostgreSQL:
     ```java
     private static final String DB_PASSWORD = "sua_senha_aqui";
     ```

5. **Compile e Execute**:
   - **Com Maven**:
     ```bash
     cd banking-system
     mvn clean compile
     mvn exec:java -Dexec.mainClass="BankingSystem"
     ```
   - **Sem Maven**:
     ```bash
     javac -cp .:postgresql-42.7.3.jar:jbcrypt-0.4.jar src/main/java/*.java
     java -cp .:postgresql-42.7.3.jar:jbcrypt-0.4.jar:src/main/java BankingSystem
     ```
     *Nota*: No Windows, substitua `:` por `;`.

---

## üéÆ Como Utilizar

- **Iniciar**:
  - Execute o programa para ver o menu:
    ```
    === Sistema Banc√°rio ===
    1. Criar Conta
    2. Depositar
    3. Sacar
    4. Consultar Saldo
    5. Transferir
    6. Sair
    Escolha uma op√ß√£o:
    ```

- **Criar Conta**:
  - Escolha a op√ß√£o 1.
  - Digite o nome do titular e uma senha.
  - Anote o ID retornado (ex.: "Conta criada com sucesso! ID da conta: 1").

- **Depositar/Sacar**:
  - Escolha a op√ß√£o 2 ou 3.
  - Informe o ID da conta e a senha.
  - Digite o valor (ex.: `100.50`).
  - O sistema confirma ou exibe erros (ex.: "Saldo insuficiente").

- **Consultar Saldo**:
  - Escolha a op√ß√£o 4.
  - Informe ID e senha.
  - Veja o nome do titular e o saldo (ex.: "Titular: Jo√£o, Saldo: R$ 100.50").

- **Transferir**:
  - Escolha a op√ß√£o 5.
  - Informe o ID da conta de origem e a senha.
  - Digite o ID da conta de destino e o valor.
  - O sistema confirma ou exibe erros (ex.: "Conta de destino n√£o encontrada").

- **Sair**:
  - Escolha a op√ß√£o 6 para encerrar.

---

## üìå Observa√ß√µes

- O sistema usa **jBCrypt** para senhas seguras e **Logger** para erros.
- Valida√ß√µes evitam entradas inv√°lidas (ex.: valores negativos).
- O hist√≥rico de transa√ß√µes √© salvo, mas n√£o h√° consulta direta nesta vers√£o.
- Para expandir, considere adicionar uma interface gr√°fica ou consulta de transa√ß√µes.

---

## üìÑ Licen√ßa

Este projeto √© livre para fins educacionais. Se for usar ou modificar, sinta-se √† vontade para dar os cr√©ditos. üòÑ
